geom_bar(position='fill', aes(fill=grade))
# top 20 cuisines have similar distribution of grades
ggplot(inspections, aes(x=score)) +
geom_density(aes(color=boro))
ggplot(inspections, aes(x=score)) +
geom_density(aes(color=boro), xlim=50)
ggplot(inspections, aes(x=score)) +
geom_density(aes(color=boro)) +
xlim(50)
ggplot(inspections, aes(x=score)) +
geom_density(aes(color=boro)) +
xlim(0,50)
head(inspections)
levels(inspections$action)
factor(inspections$action)
unique(factor(inspections$action))
inspections %>%
group_by(boro) %>%
summarise(closure_ratio = count(action %in% c('closed','reclosed'))/n(),
repeat_closure_ratio = count(action %in% c('closed'))/n())
inspections %>%
group_by(boro) %>%
summarise(closure_ratio = count(action=='closed')/n())
head(inspections)
unique(factor(inspections$action))
inspections$action == 'closed'
inspections %>%
group_by(boro) %>%
summarise(closure_ratio = sum(action=='closed')/n())
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n(),
inspections %>%
group_by(boro) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()),
repeat_closure_ratio = sum(action == 'closed')/n())
inspections %>%
inspections %>%
group_by(boro) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()),
repeat_closure_ratio = sum(action == 'closed')/n())
ratios = inspections %>%
group_by(boro) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()),
repeat_closure_ratio = sum(action == 'closed')/n())
ggplot(ratios) +
geom_point(aes(x=closure_ratio, y=repeat_closure_ratio))
ggplot(ratios) +
geom_point(aes(x=closure_ratio, y=repeat_closure_ratio, text=boro))
ggplot(ratios, aes(text-boro)) +
geom_point(aes(x=closure_ratio, y=repeat_closure_ratio, text=boro))
ggplot(ratios, aes(text=boro)) +
geom_point(aes(x=closure_ratio, y=repeat_closure_ratio, text=boro))
ggplot(ratios, aes(key=boro)) +
geom_point(aes(x=closure_ratio, y=repeat_closure_ratio, text=boro))
ggplot(ratios, aes(key=boro)) +
geom_point(aes(x=closure_ratio, y=repeat_closure_ratio, key=boro))
ggplot(ratios) +
geom_point(aes(x=closure_ratio, y=repeat_closure_ratio, color=boro))
ratios = inspections %>%
filter(cuisine_description %in% names) %>%
group_by(boro, cuisine_description) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()),
repeat_closure_ratio = sum(action == 'closed')/n())
cuisine_boro_ratios = inspections %>%
filter(cuisine_description %in% names) %>%
group_by(boro, cuisine_description) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()),
repeat_closure_ratio = sum(action == 'closed')/n())
ratios = inspections %>%
group_by(boro) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()),
repeat_closure_ratio = sum(action == 'closed')/n())
cuisine_boro_ratios
cuisine_boro_ratios = inspections %>%
filter(cuisine_description %in% names) %>%
group_by(boro, cuisine_description) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()),
repeat_closure_ratio = sum(action == 'closed')/n()) %>%
gather(ratio_type,ratio,c('closure_ratio','repeat_closure_ratio'))
cuisine_boro_ratios
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=boro, y=ratio, color=ratio_type))
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=boro, y=ratio, color=ratio_type), stat='identity')
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=boro, y=ratio, fill=ratio_type), stat='identity')
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=boro, y=ratio, fill=ratio_type), stat='identity', position='dodge')
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=boro, y=ratio, fill=ratio_type), stat='identity', position='dodge') +
facet_wrap(~cuisine_description)
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=boro, y=ratio, fill=ratio_type), stat='identity', position='fill') +
facet_wrap(~cuisine_description)
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=cuisine_description, y=ratio, fill=ratio_type), stat='identity', position='fill') +
facet_wrap(~boro)
ggplot(cuisine_boro_ratios) +
geom_bar(aes(x=boro, y=ratio, fill=ratio_type), stat='identity', position='fill') +
facet_wrap(~cuisine_description)
ggplot(inspections) +
geom_line(aes(x=month, y=score, color=boro))
ggplot(inspections) +
geom_line(aes(x=month, y=score, color=boro), position='dodge')
ggplot(inspections) +
geom_point(aes(x=month, y=score, color=boro))
ggplot(inspections) +
geom_point(aes(x=month, y=mean(score), color=boro))
ggplot(inspections) +
geom_line(aes(x=month, y=mean(score), color=boro))
inspections %>%
group_by(month) %>%
summarise(score = mean(score),
boro = boro)
inspections %>%
group_by(month) %>%
summarise(score = mean(score),
boro = mode(boro))
inspections %>%
group_by(month,boro) %>%
summarise(score = mean(score))
trend = inspections %>%
group_by(month,boro) %>%
summarise(score = mean(score))
ggplot(trend) +
geom_line(aes(x=month, y=score, color=boro))
ratios
inspections %>%
group_by(boro, month) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()))
ratio_month = inspections %>%
group_by(boro, month) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()))
ratio_month = inspections %>%
group_by(boro, month) %>%
summarise(closure_ratio = sum(action %in% c('closed','reclosed')/n()))
ggplot(ratio_month) +
geom_line(aes(x=month, y=closure_ratio, color=boro))
ggplot(cuisine_inspections, aes(y=cuisine_description)) +
geom_bar(position='fill', aes(fill=grade))
ggplot(cuisine_inspections, aes(y=cuisine_description)) +
geom_bar( aes(fill=grade))
ggplot(cuisine_inspections, aes(y=cuisine_description)) +
geom_bar(aes(fill=grade))
ggplot(cuisine_inspections, aes(y=cuisine_description)) +
geom_bar(aes(fill=grade), position='dodge')
ggplot(cuisine_inspections, aes(y=cuisine_description)) +
geom_bar(position='fill', aes(fill=grade))
shiny::runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
plot_geo(happiness_2019)
head(happiness_2019)
plot_geo(happiness_2019) %>%
add_trace(z= ~Score, text=Country.or.region)
plot_geo(happiness_2019) %>%
add_trace(z= ~Score)
plot_geo(happiness_2019) %>%
add_trace(z= ~Score,
locations = Country.or.region)
plot_geo(happiness_2019) %>%
add_trace(z= ~Score,
locations = happiness_2019$Country.or.region)
plot_geo(happiness_2019) %>%
add_trace(z= ~Score,
color = ~Score
locations = happiness_2019$Country.or.region)
plot_geo(happiness_2019) %>%
add_trace(z= ~Score,
color = ~Score,
locations = happiness_2019$Country.or.region)
plot_geo(happiness_2019) %>%
add_trace(z = ~Score, color = ~Score, colors = 'Blues',
text = ~Country, locations = ~Code, marker = list(line = l))
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(showframe = FALSE,showcoastlines = FALSE,
projection = list(type = 'Mercator'))
plot_geo(happiness_2019) %>%
add_trace(z = ~Score, color = ~Score, colors = 'Blues',
text = ~Country, locations = ~Code, marker = list(line = l))
head(happiness_2019)
plot_geo(happiness_2019) %>%
add_trace(z = ~Score, color = ~Score, colors = 'Blues',
text = ~Country.or.region, locations = ~Code, marker = list(line = l))
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Blues',
text = ~Country.or.region,
locations = ~Country.or.region,
marker = list(line = l))
install.packages('countrycode')
countrycode(happiness_2019$Country.or.region, origin='country.name',destination='iso3c')
library(countrycode)
countrycode(happiness_2019$Country.or.region, origin='country.name',destination='iso3c')
happiness_2019$code = countrycode(happiness_2019$Country.or.region, origin='country.name',destination='iso3c')
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Blues',
text = ~Country.or.region,
locations = ~code,
marker = list(line = l))
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Greens',
text = ~Country.or.region,
locations = ~code,
marker = list(line = l))
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Greens',
text = ~Country.or.region,
locations = ~code,
marker = list(line = l)) %>%
colorbar(title = 'Index') %>%
layout(title = 'Happiness Score <br>Source:
<a href="http://worldhappiness.report/ed/2016/">
World Happiness Report</a>',geo = g)
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Greens',
text = ~Country.or.region,
locations = ~code,
marker = list(line = l)) %>%
colorbar(title = 'Score') %>%
layout(title = 'Happiness Score' ,geo = g)
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Greens',
text = ~Country.or.region,
locations = ~code,
) %>%
colorbar(title = 'Score') %>%
layout(title = 'Happiness Score' ,geo = g)
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Greens',
text = ~Country.or.region,
locations = ~code
) %>%
colorbar(title = 'Score') %>%
layout(title = 'Happiness Score' ,geo = g)
plot_geo(happiness_2019) %>%
add_trace(z = ~Score,
color = ~Score,
colors = 'Greens',
text = ~Country.or.region,
locations = ~code,
marker = list(line = l)
) %>%
colorbar(title = 'Score') %>%
layout(title = 'Happiness Score' ,geo = g)
head(happiness_2019)
runApp('Documents/nycDataScience/happiness_dashboard')
fluidPage(
theme=shinytheme("flatly"),
tags$head(
tags$style(HTML("
.navbar .navbar-header {float: right}
"))
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
head(happiness_2017)
head(happiness_2016)
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
runApp('Documents/nycDataScience/happiness_dashboard')
names(happiness_2015)
names(happiness_2019)
rbind(happiness_2015,happiness_2019)
rbind(c(happiness_2015,happiness_2019))
happiness_2019$year = 2019
names(happiness_2019)
head(happiness_2019)
happiness_2019 %>%
rename(
Overall.rank = rank,
Country.or.region = country,
)
happiness_2019 %>%
rename(
rank = Overall.rank,
country = Country.or.region
)
levels(happiness_2019)
colnames(happiness_2019)
happiness_2019 = happiness_2019 %>%
rename(
rank = Overall.rank,
country = Country.or.region
)
colnames(happiness_2019)
happiness_2019 = happiness_2019[,column_order]
column_order = c('year','rank','country','code','Score', 'GDP.per.capita','Social.support', 'Healthy.life.expectancy' ,'Freedom.to.make.life.choices', 'Generosity', 'Perceptions.of.corruption')
happiness_2019 = happiness_2019[,column_order]
happiness_2019
colnames(happiness_2015)
happiness_2019 = happiness_2019 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita,
Social.support,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2015 = happiness_2015 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita,
Social.support,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
colnames(happiness_2015)
happiness_2015 = happiness_2015 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Social.support,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2015 = happiness_2015 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
colnames(happiness_2015)
happiness_2016 = happiness_2016 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2017 = happiness_2017 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2018 = happiness_2018 %>%
rename(
rank = Overall.rank,
Country = Country.or.region
)
happiness_2019 = happiness_2019 %>%
rename(
rank = Overall.rank,
Country = Country.or.region
)
bind_rows(happiness_2015,happiness_2016,happiness_2017,happiness_2018,happiness_2019)
str(happiness_2015)
str(happiness_2019)
str(happiness_2018)
as.numeric(happiness_2018$Perceptions.of.corruption)
happiness_2018$Perceptions.of.corruption
happiness_2018$Perceptions.of.corruption = as.numeric(happiness_2018$Perceptions.of.corruption)
bind_rows(happiness_2015,happiness_2016,happiness_2017,happiness_2018,happiness_2019)
# add column year to each dataframe
happiness_2019$year = 2019
happiness_2018$year = 2018
happiness_2017$year = 2017
happiness_2016$year = 2016
happiness_2015$year = 2015
happiness_2015 = happiness_2015 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2016 = happiness_2016 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2017 = happiness_2017 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2018 = happiness_2018 %>%
rename(
rank = Overall.rank,
Country = Country.or.region
)
happiness_2019 = happiness_2019 %>%
rename(
rank = Overall.rank,
Country = Country.or.region
)
happiness_2018$Perceptions.of.corruption = as.numeric(happiness_2018$Perceptions.of.corruption)
bind_rows(happiness_2015,happiness_2016,happiness_2017,happiness_2018,happiness_2019)
# import happiness csv by year
happiness_2019 = read.csv("./data/happiness_2019.csv")
happiness_2018 = read.csv("./data/happiness_2018.csv")
happiness_2017 = read.csv("./data/happiness_2017.csv")
happiness_2016 = read.csv("./data/happiness_2016.csv")
happiness_2015 = read.csv("./data/happiness_2015.csv")
# add column year to each dataframe
happiness_2019$year = 2019
happiness_2018$year = 2018
happiness_2017$year = 2017
happiness_2016$year = 2016
happiness_2015$year = 2015
happiness_2015 = happiness_2015 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2016 = happiness_2016 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2017 = happiness_2017 %>%
rename(
rank = Happiness.Rank,
Score = Happiness.Score,
GDP.per.capita = Economy..GDP.per.Capita.,
Healthy.life.expectancy = Health..Life.Expectancy.,
Freedom.to.make.life.choices = Freedom,
Perceptions.of.corruption = Trust..Government.Corruption.
)
happiness_2018 = happiness_2018 %>%
rename(
rank = Overall.rank,
Country = Country.or.region
)
happiness_2019 = happiness_2019 %>%
rename(
rank = Overall.rank,
Country = Country.or.region
)
happiness_2018$Perceptions.of.corruption = as.numeric(happiness_2018$Perceptions.of.corruption)
bind_rows(happiness_2015,happiness_2016,happiness_2017,happiness_2018,happiness_2019)
colnames(happiness_2015)
colnames(happiness_2016)
colnames(happiness_2017)
colnames(happiness_2019)
happiness_2019 = happiness_2019 %>%
rename(
rank = Overall.rank,
Country = Country.or.region
)
# import happiness csv by year
happiness_2019 = read.csv("./data/happiness_2019.csv")
# import happiness csv by year
happiness_2019 = read.csv("./data/happiness_2019,csv")
happiness_2018 = read.csv("./data/happiness_2018.csv")
library(shiny)
library(shinythemes)
library(plotly)
library(googleVis)
library(tidyverse)
library(DT)
library(countrycode)
# import happiness csv by year
happiness_2019 = read.csv("./data/happiness_2019,csv")
setwd("~/Documents/nycDataScience/happiness_dashboard")
# import happiness csv by year
happiness_2019 = read.csv("./data/happiness_2019,csv")
getwd()
# import happiness csv by year
happiness_2019 = read.csv("./data/happiness_2019,csv")
